/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "esp32s3TftEncoder_menu.h"
#include "ThemeCoolBlueTraditional.h"
#include <Fonts/OpenSansCyrillicLatin12.h>

// Global variable declarations
const  ConnectorLocalInfo applicationInfo = { "ESP32 S3 Tiny", "c035e186-32cc-45e4-ac28-773f57e108ee" };

TFT_eSPI gfx;
TfteSpiDrawable gfxDrawable(&gfx, 20);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);

// Global Menu Item declarations
RENDERING_CALLBACK_NAME_INVOKE(fnNewSubMenuDateRtCall, dateItemRenderFn, "Date", -1, NO_CALLBACK)
DateFormattedMenuItem menuNewSubMenuDate(fnNewSubMenuDateRtCall, DateStorage(1, 1, 2020), 9, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnNewSubMenuTextRtCall, textItemRenderFn, "Text", -1, NO_CALLBACK)
TextMenuItem menuNewSubMenuText(fnNewSubMenuTextRtCall, "", 8, 5, &menuNewSubMenuDate);
RENDERING_CALLBACK_NAME_INVOKE(fnNewSubMenuColorRtCall, rgbAlphaItemRenderFn, "Color", -1, NO_CALLBACK)
Rgb32MenuItem menuNewSubMenuColor(fnNewSubMenuColorRtCall, RgbColor32(0, 0, 0), 7, false, &menuNewSubMenuText);
const SubMenuInfo minfoNewSubMenu = { "New SubMenu", 6, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackNewSubMenu(&minfoNewSubMenu, &menuNewSubMenuColor, INFO_LOCATION_PGM);
SubMenuItem menuNewSubMenu(&minfoNewSubMenu, &menuBackNewSubMenu, NULL, INFO_LOCATION_PGM);
const BooleanMenuInfo minfoToGo = { "To go", 5, 0xffff, 1, NO_CALLBACK, NAMING_YES_NO };
BooleanMenuItem menuToGo(&minfoToGo, false, &menuNewSubMenu, INFO_LOCATION_PGM);
const char enumStrFoods_0[] = "Pizza";
const char enumStrFoods_1[] = "Pasta";
const char enumStrFoods_2[] = "Salad";
const char* const enumStrFoods[]  = { enumStrFoods_0, enumStrFoods_1, enumStrFoods_2 };
const EnumMenuInfo minfoFoods = { "Foods", 4, 0xffff, 2, NO_CALLBACK, enumStrFoods };
EnumMenuItem menuFoods(&minfoFoods, 0, &menuToGo, INFO_LOCATION_PGM);
RENDERING_CALLBACK_NAME_INVOKE(fnLgeNumRtCall, largeNumItemRenderFn, "Lge Num", -1, NO_CALLBACK)
EditableLargeNumberMenuItem menuLgeNum(fnLgeNumRtCall, LargeFixedNumber(6, 4, 0U, 0U, false), 3, true, &menuFoods);
const AnalogMenuInfo minfoTenths = { "Tenths", 2, 0xffff, 1000, NO_CALLBACK, 0, 10, "" };
AnalogMenuItem menuTenths(&minfoTenths, 0, &menuLgeNum, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoPercent = { "Percent", 1, 0xffff, 100, NO_CALLBACK, 0, 1, "%" };
AnalogMenuItem menuPercent(&minfoPercent, 0, &menuTenths, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(false);
    // Code generated by plugins.
    gfx.begin();
    gfx.setRotation(1);
    renderer.setUpdatesPerSecond(15);
    switches.init(internalDigitalIo(), SWITCHES_NO_POLLING, true);
    menuMgr.initForEncoder(&renderer, &menuPercent, 3, 4, 5);
    renderer.setTitleMode(BaseGraphicalRenderer::TITLE_FIRST_ROW);
    renderer.setUseSliderForAnalog(true);
    renderer.enableTcUnicode();
    installCoolBlueTraditionalTheme(renderer, MenuFontDef(&OpenSansCyrillicLatin12, 0), MenuFontDef(&OpenSansCyrillicLatin12, 0), true);
}

