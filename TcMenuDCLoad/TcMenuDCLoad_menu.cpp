/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "TcMenuDCLoad_menu.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "TcMenuDCLoad", "c1e57f0f-7446-4948-9970-833b4018e35b" };
ArduinoEEPROMAbstraction glArduinoEeprom(&EEPROM);
LiquidCrystal lcd(2, 1, 0, 4, 5, 6, 7);
LiquidCrystalRenderer renderer(lcd, 20, 4);

// Global Menu Item declarations
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsMaxPowerRtCall, textItemRenderFn, "Max Power", 16, SetMaxP)
TextMenuItem menuSettingsMaxPower(fnSettingsMaxPowerRtCall, "", 9, 5, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsMaxAmperageRtCall, textItemRenderFn, "Max Amperage", 11, SetMaxA)
TextMenuItem menuSettingsMaxAmperage(fnSettingsMaxAmperageRtCall, "", 8, 5, &menuSettingsMaxPower);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsMaxVoltageRtCall, textItemRenderFn, "Max Voltage", 6, SetMaxV)
TextMenuItem menuSettingsMaxVoltage(fnSettingsMaxVoltageRtCall, "", 7, 5, &menuSettingsMaxAmperage);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsScreenBrightnessRtCall, enumItemRenderFn, "ScreenBrightness", 4, SetScreenBrightness)
ScrollChoiceMenuItem menuSettingsScreenBrightness(6, fnSettingsScreenBrightnessRtCall, 0, 0, 10, 0, &menuSettingsMaxVoltage);
const char enumStrSettingsSelectControl_0[] PROGMEM = "Analog";
const char enumStrSettingsSelectControl_1[] PROGMEM = "Digital";
const char* const enumStrSettingsSelectControl[] PROGMEM  = { enumStrSettingsSelectControl_0, enumStrSettingsSelectControl_1 };
const PROGMEM EnumMenuInfo minfoSettingsSelectControl = { "SelectControl", 5, 2, 1, SelectControl, enumStrSettingsSelectControl };
EnumMenuItem menuSettingsSelectControl(&minfoSettingsSelectControl, 0, &menuSettingsScreenBrightness);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsRtCall, backSubItemRenderFn, "Settings", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoSettings = { "Settings", 4, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(fnSettingsRtCall, &menuSettingsSelectControl);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, NULL);
const PROGMEM FloatMenuInfo minfoAccumulatedWh = { "Accumulated Wh", 12, 0xffff, 3, GetWh };
FloatMenuItem menuAccumulatedWh(&minfoAccumulatedWh, 0.0, &menuSettings);
const PROGMEM FloatMenuInfo minfoAccumulatedmAh = { "Accumulated mAh", 11, 0xffff, 3, GetmAh };
FloatMenuItem menuAccumulatedmAh(&minfoAccumulatedmAh, 0.0, &menuAccumulatedWh);
RENDERING_CALLBACK_NAME_INVOKE(fnRunTimeRtCall, timeItemRenderFn, "Run Time", 21, ResetRunTime)
TimeFormattedMenuItem menuRunTime(fnRunTimeRtCall, TimeStorage(0, 0, 0, 0), 10, (MultiEditWireType)7, &menuAccumulatedmAh);
const PROGMEM BooleanMenuInfo minfoDCLoad = { "DC Load", 3, 0xffff, 1, TogglePin13, NAMING_ON_OFF };
BooleanMenuItem menuDCLoad(&minfoDCLoad, false, &menuRunTime);
const PROGMEM FloatMenuInfo minfoAmperage = { "Amperage", 2, 0xffff, 3, GetA };
FloatMenuItem menuAmperage(&minfoAmperage, 0.0, &menuDCLoad);
const PROGMEM FloatMenuInfo minfoVoltage = { "Voltage", 1, 0xffff, 3, GetV };
FloatMenuItem menuVoltage(&minfoVoltage, 0.0, &menuAmperage);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    menuMgr.setEepromRef(&glArduinoEeprom);
    // Now add any readonly, non-remote and visible flags.
    menuSettingsSelectControl.setReadOnly(true);
    menuAccumulatedWh.setReadOnly(true);
    menuRunTime.setReadOnly(true);
    menuSettingsScreenBrightness.setReadOnly(true);
    menuAccumulatedmAh.setReadOnly(true);
    menuDCLoad.setReadOnly(true);
    menuAmperage.setReadOnly(true);
    menuVoltage.setReadOnly(true);

    // Code generated by plugins.
    Wire.begin();
    lcd.setIoAbstraction(ioFrom8574(0x20, 0xff, &Wire));
    lcd.begin(20, 4);
    renderer.setUpdatesPerSecond(2);
    lcd.configureBacklightPin(3);
    lcd.backlight();
    switches.init(internalDigitalIo(), SWITCHES_POLL_EVERYTHING, true);
    menuMgr.initForEncoder(&renderer, &menuVoltage, 2, 3, 8);
}

